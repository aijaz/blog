DROP TABLE IF EXISTS asset_comment_fave;
DROP TABLE IF EXISTS asset_comment_text;
DROP TABLE IF EXISTS asset_comment;
DROP TABLE IF EXISTS asset_fave;
DROP TABLE IF EXISTS asset_caption;
DROP TABLE IF EXISTS asset;
DROP TYPE IF EXISTS T_ASSET_TYPE;
DROP TABLE IF EXISTS post_comment_fave;
DROP TABLE IF EXISTS post_comment_text;
DROP TABLE IF EXISTS post_comment;
DROP TABLE IF EXISTS post_fave;
DROP TABLE IF EXISTS post_moderation;
DROP TABLE IF EXISTS post_text;
DROP TABLE IF EXISTS post;
DROP TYPE IF EXISTS T_MODERATION_TYPE;
DROP TABLE IF EXISTS forgot_message;
DROP TABLE IF EXISTS auth_token;
DROP TABLE IF EXISTS Membership;
DROP TABLE IF EXISTS Person;
DROP TYPE IF EXISTS T_ROLE;
DROP TABLE IF EXISTS Organization;
DROP TABLE IF EXISTS GlobalSettings;

-- Global Settings

CREATE TABLE GlobalSettings (
    log_rounds INT NOT NULL DEFAULT 10
);

-- Organization

CREATE TABLE Organization (
      id SERIAL UNIQUE PRIMARY KEY NOT NULL
    , name TEXT NOT NULL
);

CREATE TYPE T_ROLE AS ENUM ('admin', 'moderator', 'user');


-- Person

CREATE TABLE Person (
      id SERIAL UNIQUE PRIMARY KEY NOT NULL
    , role T_ROLE NOT NULL
    , name TEXT NOT NULL
    , email TEXT NOT NULL
    , password char(60) NOT NULL
);


-- Membership

CREATE TABLE Membership (
      org_id INT NOT NULL REFERENCES Organization(id)
    , person_id INT NOT NULL REFERENCES Person(id)
);

CREATE INDEX i_membership on Membership(org_id, person_id);


-- Auth token

CREATE TABLE auth_token (
      id SERIAL UNIQUE PRIMARY KEY NOT NULL
    , person_id INT NOT NULL REFERENCES Person(id)
    , token CHAR(60) NOT NULL -- really, a guid,  but crypted
    , last_use_date TIMESTAMP NOT NULL DEFAULT statement_timestamp()
);
CREATE INDEX i_auth_personid ON Auth_token(person_id);
CREATE INDEX i_auth_token ON Auth_token(token);


-- Forgot token

CREATE TABLE forgot_message (
      id SERIAL UNIQUE PRIMARY KEY NOT NULL
    , guid CHAR(36)
    , person_id INT NOT NULL REFERENCES person(id)
    , date_sent TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT statement_timestamp()
    , date_validated TIMESTAMP WITH TIME ZONE NULL
);
CREATE INDEX i_forgot_message_guid ON Forgot_message(guid);


-- Posts

CREATE TYPE T_MODERATION_TYPE AS ENUM ('hidden', 'unhidden');

CREATE TABLE post (
      id SERIAL UNIQUE PRIMARY KEY NOT NULL
    , org_id INT NOT NULL REFERENCES Organization(id)
    , person_id INT NOT NULL REFERENCES person(id)
    , post_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , hidden BOOLEAN NOT NULL DEFAULT false
);
CREATE INDEX i_post on post(org_id, post_time);

CREATE TABLE post_text (
      post_id INT NOT NULL REFERENCES post(id)
    , post_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , the_text TEXT NOT NULL
);
CREATE INDEX i_post_text on post_text(post_id, post_time);

CREATE TABLE post_moderation (
      post_id INT NOT NULL REFERENCES post(id)
    , moderation_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , moderation_type T_MODERATION_TYPE NOT NULL
    , moderator_id INT NOT NULL REFERENCES Person(id)
);
CREATE INDEX i_post_moderation on post_moderation(post_id, moderation_time);

CREATE TABLE post_fave (
      post_id INT NOT NULL REFERENCES post(id)
    , fave_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , person_id INT NOT NULL REFERENCES Person(id)
);
CREATE INDEX i_post_fave on post_fave(post_id, person_id);

CREATE TABLE post_comment (
      id SERIAL UNIQUE PRIMARY KEY NOT NULL
    , post_id INT NOT NULL REFERENCES post(id)
    , comment_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , person_id INT NOT NULL REFERENCES Person(id)
);
CREATE INDEX i_post_comment on post_comment(post_id);

CREATE TABLE post_comment_text (
      post_comment_id INT NOT NULL REFERENCES post_comment(id)
    , comment_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , the_text TEXT NOT NULL
);
CREATE INDEX i_post_comment_text on post_comment_text(post_comment_id, comment_time);

CREATE TABLE post_comment_fave (
      post_comment_id INT NOT NULL REFERENCES post_comment(id)
    , fave_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , person_id INT NOT NULL REFERENCES Person(id)
);
CREATE INDEX i_post_comment_fave on post_comment_fave(post_comment_id, person_id);


-- Asset

CREATE TYPE T_ASSET_TYPE AS ENUM ('image', 'video');

CREATE TABLE asset (
      id SERIAL UNIQUE PRIMARY KEY NOT NULL
    , post_id INT NOT NULL REFERENCES post(id)
    , asset_type T_ASSET_TYPE NOT NULL
);

CREATE TABLE asset_caption (
      asset_id INT NOT NULL REFERENCES asset(id)
    , caption_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , the_text TEXT NOT NULL
);
CREATE INDEX i_asset_caption on asset_caption(asset_id, caption_time);

CREATE TABLE asset_fave (
      asset_id INT NOT NULL REFERENCES asset(id)
    , fave_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , person_id INT NOT NULL REFERENCES Person(id)
);
CREATE INDEX i_asset_fave on asset_fave(asset_id, person_id);

CREATE TABLE asset_comment (
      id SERIAL UNIQUE PRIMARY KEY NOT NULL
    , asset_id INT NOT NULL REFERENCES asset(id)
    , comment_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , person_id INT NOT NULL REFERENCES Person(id)
);
CREATE INDEX i_asset_comment on asset_comment(asset_id);

CREATE TABLE asset_comment_text (
      asset_comment_id INT NOT NULL REFERENCES asset_comment(id)
    , comment_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , the_text TEXT NOT NULL
);
CREATE INDEX i_asset_comment_text on asset_comment_text(asset_comment_id, comment_time);

CREATE TABLE asset_comment_fave (
      asset_comment_id INT NOT NULL REFERENCES asset_comment(id)
    , fave_time TIMESTAMP NOT NULL DEFAULT statement_timestamp()
    , person_id INT NOT NULL REFERENCES Person(id)
);
CREATE INDEX i_asset_comment_fave on asset_comment_fave(asset_comment_id, person_id);




